{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createNewDeck } from '../helpers/CRUD/create';\nimport { drawCards, getDeck } from '../helpers/CRUD/read';\nconst initialState = {\n  currentDeck: {},\n  currentDraw: {},\n  info: {},\n  gameData: {\n    loggedIn: false,\n    decks: []\n  }\n};\nexport const RootReducer = createSlice({\n  name: 'todo_app',\n  initialState,\n  reducers: {\n    setLogin(state) {\n      gameData.loggedIn = true;\n    },\n    getFromStorage(state) {}\n  },\n  extraReducers(builder) {\n    // get existing deck\n    builder.addCase(getDeck.rejected, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'error',\n        message: 'Unable to create deck. Server or internet down'\n      };\n    });\n    builder.addCase(getDeck.pending, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'warning',\n        message: 'Generating deck. Please wait...'\n      };\n    });\n    builder.addCase(getDeck.fulfilled, (state, action) => {\n      state.currentDeck = action.payload;\n      // state.info = {\n      //    switchModalOn: false,\n      //    type: 'success',\n      //    message: 'Deck generated',\n      // };\n    });\n    // new deck cases\n    builder.addCase(createNewDeck.rejected, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'error',\n        message: 'Unable to create deck. Server or internet down'\n      };\n    });\n    builder.addCase(createNewDeck.pending, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'warning',\n        message: 'Generating deck. Please wait...'\n      };\n    });\n    builder.addCase(createNewDeck.fulfilled, (state, action) => {\n      state.currentDeck = action.payload;\n      state.info = {\n        switchModalOn: false,\n        type: 'success',\n        message: 'Deck generated'\n      };\n    });\n    // draw cards cases\n    builder.addCase(drawCards.fulfilled, (state, action) => {\n      state.currentDraw = action.payload;\n      state.currentDeck.remaining = action.payload.remaining;\n      state.info = {\n        switchModalOn: false,\n        type: 'success',\n        message: 'Cards drawn'\n      };\n    });\n    builder.addCase(drawCards.pending, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'warning',\n        message: 'Drawing a pair of cards...'\n      };\n    });\n    builder.addCase(drawCards.rejected, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'error',\n        message: 'Cards could not be drawn. Check your connection'\n      };\n      console.log('drawCards.rejected payload', action.payload);\n    });\n  }\n});\nexport const getInfoObj = state => state.info;\n\n// export const {addToDo} = RootReducer.actions;\nexport default RootReducer.reducer;","map":{"version":3,"names":["createSlice","createNewDeck","drawCards","getDeck","initialState","currentDeck","currentDraw","info","gameData","loggedIn","decks","RootReducer","name","reducers","setLogin","state","getFromStorage","extraReducers","builder","addCase","rejected","action","switchModalOn","type","message","pending","fulfilled","payload","remaining","console","log","getInfoObj","reducer"],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-bridge-card-game/src/redux-store/RootReducer.ts"],"sourcesContent":["import React from 'react';\nimport {createAsyncThunk, createSlice, current} from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nimport {GlobalState, Todo} from '../helpers/types';\nimport {createNewDeck, setToLocalStorage} from '../helpers/CRUD/create';\nimport {drawCards, getDeck} from '../helpers/CRUD/read';\n\nconst initialState: GlobalState = {\n   currentDeck: {},\n   currentDraw: {},\n   info: {},\n   gameData: {loggedIn: false, decks: []},\n};\n\nexport const RootReducer = createSlice({\n   name: 'todo_app',\n   initialState,\n   reducers: {\n      setLogin(state) {\n         gameData.loggedIn = true;\n      },\n      getFromStorage(state) {},\n   },\n   extraReducers(builder) {\n      // get existing deck\n      builder.addCase(getDeck.rejected, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'error',\n            message: 'Unable to create deck. Server or internet down',\n         };\n      });\n      builder.addCase(getDeck.pending, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'warning',\n            message: 'Generating deck. Please wait...',\n         };\n      });\n      builder.addCase(getDeck.fulfilled, (state, action) => {\n         state.currentDeck = action.payload;\n         // state.info = {\n         //    switchModalOn: false,\n         //    type: 'success',\n         //    message: 'Deck generated',\n         // };\n      });\n      // new deck cases\n      builder.addCase(createNewDeck.rejected, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'error',\n            message: 'Unable to create deck. Server or internet down',\n         };\n      });\n      builder.addCase(createNewDeck.pending, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'warning',\n            message: 'Generating deck. Please wait...',\n         };\n      });\n      builder.addCase(createNewDeck.fulfilled, (state, action) => {\n         state.currentDeck = action.payload;\n         state.info = {\n            switchModalOn: false,\n            type: 'success',\n            message: 'Deck generated',\n         };\n      });\n      // draw cards cases\n      builder.addCase(drawCards.fulfilled, (state, action) => {\n         state.currentDraw = action.payload;\n         state.currentDeck.remaining = action.payload.remaining;\n         state.info = {\n            switchModalOn: false,\n            type: 'success',\n            message: 'Cards drawn',\n         };\n      });\n      builder.addCase(drawCards.pending, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'warning',\n            message: 'Drawing a pair of cards...',\n         };\n      });\n      builder.addCase(drawCards.rejected, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'error',\n            message: 'Cards could not be drawn. Check your connection',\n         };\n         console.log('drawCards.rejected payload', action.payload);\n      });\n   },\n});\n\nexport const getInfoObj = (state: any) => state.info;\n\n// export const {addToDo} = RootReducer.actions;\nexport default RootReducer.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createNewDeck, setToLocalStorage } from '../helpers/CRUD/create';\nimport { drawCards, getDeck } from '../helpers/CRUD/read';\nconst initialState = {\n  currentDeck: {},\n  currentDraw: {},\n  info: {},\n  gameData: {\n    loggedIn: false,\n    decks: []\n  }\n};\nexport const RootReducer = createSlice({\n  name: 'todo_app',\n  initialState,\n  reducers: {\n    setLogin(state) {\n      state.gameData.loggedIn = true;\n      state.info = {\n        switchModalOn: true,\n        type: 'success',\n        message: 'Successfully authorized'\n      };\n    },\n    setLogOut(state) {\n      state.gameData.loggedIn = false;\n      state.info = {\n        switchModalOn: true,\n        type: 'success',\n        message: 'Successfully logged out'\n      };\n    },\n    setLoginError(state) {\n      state.info = {\n        switchModalOn: true,\n        type: 'error',\n        message: 'Unable to authorize. Please check your username and/or password'\n      };\n    }\n  },\n  extraReducers(builder) {\n    // get existing deck\n    builder.addCase(getDeck.rejected, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'error',\n        message: 'Unable to create deck. Server or internet down'\n      };\n    });\n    builder.addCase(getDeck.pending, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'warning',\n        message: 'Generating deck. Please wait...'\n      };\n    });\n    builder.addCase(getDeck.fulfilled, (state, action) => {\n      state.currentDeck = action.payload;\n\n      // state.info = {\n      //    switchModalOn: false,\n      //    type: 'success',\n      //    message: 'Deck generated',\n      // };\n    });\n    // new deck cases\n    builder.addCase(createNewDeck.rejected, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'error',\n        message: 'Unable to create deck. Server or internet down'\n      };\n    });\n    builder.addCase(createNewDeck.pending, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'warning',\n        message: 'Generating deck. Please wait...'\n      };\n    });\n    builder.addCase(createNewDeck.fulfilled, (state, action) => {\n      state.currentDeck = action.payload;\n      state.info = {\n        switchModalOn: false,\n        type: 'success',\n        message: 'Deck generated'\n      };\n      state.gameData.decks.push({\n        deckId: action.payload.deck_id\n      });\n      setToLocalStorage(state.gameData);\n    });\n    // draw cards cases\n    builder.addCase(drawCards.fulfilled, (state, action) => {\n      state.currentDraw = action.payload;\n      state.currentDeck.remaining = action.payload.remaining;\n      state.info = {\n        switchModalOn: false,\n        type: 'success',\n        message: 'Cards drawn'\n      };\n    });\n    builder.addCase(drawCards.pending, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'warning',\n        message: 'Drawing a pair of cards...'\n      };\n    });\n    builder.addCase(drawCards.rejected, (state, action) => {\n      state.info = {\n        switchModalOn: true,\n        type: 'error',\n        message: 'Cards could not be drawn. Check your connection'\n      };\n      console.log('drawCards.rejected payload', action.payload);\n    });\n  }\n});\nexport const getInfoObj = state => state.info;\nexport const {\n  setLogin\n} = RootReducer.actions;\nexport default RootReducer.reducer;","map":{"version":3,"names":["createSlice","createNewDeck","setToLocalStorage","drawCards","getDeck","initialState","currentDeck","currentDraw","info","gameData","loggedIn","decks","RootReducer","name","reducers","setLogin","state","switchModalOn","type","message","setLogOut","setLoginError","extraReducers","builder","addCase","rejected","action","pending","fulfilled","payload","push","deckId","deck_id","remaining","console","log","getInfoObj","actions","reducer"],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-bridge-card-game/src/redux-store/RootReducer.ts"],"sourcesContent":["import React from 'react';\nimport {createAsyncThunk, createSlice, current} from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nimport {GlobalState, Todo} from '../helpers/types';\nimport {createNewDeck, setToLocalStorage} from '../helpers/CRUD/create';\nimport {drawCards, getDeck} from '../helpers/CRUD/read';\n\nconst initialState: GlobalState = {\n   currentDeck: {},\n   currentDraw: {},\n   info: {},\n   gameData: {loggedIn: false, decks: []},\n};\n\nexport const RootReducer = createSlice({\n   name: 'todo_app',\n   initialState,\n   reducers: {\n      setLogin(state) {\n         state.gameData.loggedIn = true;\n         state.info = {\n            switchModalOn: true,\n            type: 'success',\n            message: 'Successfully authorized',\n         };\n      },\n      setLogOut(state) {\n         state.gameData.loggedIn = false;\n         state.info = {\n            switchModalOn: true,\n            type: 'success',\n            message: 'Successfully logged out',\n         };\n      },\n      setLoginError(state) {\n         state.info = {\n            switchModalOn: true,\n            type: 'error',\n            message:\n               'Unable to authorize. Please check your username and/or password',\n         };\n      },\n   },\n   extraReducers(builder) {\n      // get existing deck\n      builder.addCase(getDeck.rejected, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'error',\n            message: 'Unable to create deck. Server or internet down',\n         };\n      });\n      builder.addCase(getDeck.pending, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'warning',\n            message: 'Generating deck. Please wait...',\n         };\n      });\n      builder.addCase(getDeck.fulfilled, (state, action) => {\n         state.currentDeck = action.payload;\n\n         // state.info = {\n         //    switchModalOn: false,\n         //    type: 'success',\n         //    message: 'Deck generated',\n         // };\n      });\n      // new deck cases\n      builder.addCase(createNewDeck.rejected, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'error',\n            message: 'Unable to create deck. Server or internet down',\n         };\n      });\n      builder.addCase(createNewDeck.pending, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'warning',\n            message: 'Generating deck. Please wait...',\n         };\n      });\n      builder.addCase(createNewDeck.fulfilled, (state, action) => {\n         state.currentDeck = action.payload;\n         state.info = {\n            switchModalOn: false,\n            type: 'success',\n            message: 'Deck generated',\n         };\n         state.gameData.decks.push({\n            deckId: action.payload.deck_id,\n         });\n         setToLocalStorage(state.gameData);\n      });\n      // draw cards cases\n      builder.addCase(drawCards.fulfilled, (state, action) => {\n         state.currentDraw = action.payload;\n         state.currentDeck.remaining = action.payload.remaining;\n         state.info = {\n            switchModalOn: false,\n            type: 'success',\n            message: 'Cards drawn',\n         };\n      });\n      builder.addCase(drawCards.pending, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'warning',\n            message: 'Drawing a pair of cards...',\n         };\n      });\n      builder.addCase(drawCards.rejected, (state, action) => {\n         state.info = {\n            switchModalOn: true,\n            type: 'error',\n            message: 'Cards could not be drawn. Check your connection',\n         };\n         console.log('drawCards.rejected payload', action.payload);\n      });\n   },\n});\n\nexport const getInfoObj = (state: any) => state.info;\n\nexport const {setLogin} = RootReducer.actions;\nexport default RootReducer.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
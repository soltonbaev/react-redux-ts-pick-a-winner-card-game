{"ast":null,"code":"import _slicedToArray from \"/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-rainbow-todo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\n\n// To replace with .findIndex() once we stop IE11 support.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction findIndex(array, comp) {\n  for (var i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction binaryFindElement(array, element) {\n  var start = 0;\n  var end = array.length - 1;\n  while (start <= end) {\n    var middle = Math.floor((start + end) / 2);\n    if (array[middle].element === element) {\n      return middle;\n    }\n\n    // eslint-disable-next-line no-bitwise\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return start;\n}\nvar DescendantContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\nfunction usePrevious(value) {\n  var ref = React.useRef(null);\n  React.useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nvar noop = function noop() {};\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\nexport function useDescendant(descendant) {\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    forceUpdate = _React$useState2[1];\n  var _React$useContext = React.useContext(DescendantContext),\n    _React$useContext$reg = _React$useContext.registerDescendant,\n    registerDescendant = _React$useContext$reg === void 0 ? noop : _React$useContext$reg,\n    _React$useContext$unr = _React$useContext.unregisterDescendant,\n    unregisterDescendant = _React$useContext$unr === void 0 ? noop : _React$useContext$unr,\n    _React$useContext$des = _React$useContext.descendants,\n    descendants = _React$useContext$des === void 0 ? [] : _React$useContext$des,\n    _React$useContext$par = _React$useContext.parentId,\n    parentId = _React$useContext$par === void 0 ? null : _React$useContext$par;\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  var index = findIndex(descendants, function (item) {\n    return item.element === descendant.element;\n  });\n  var previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  var someDescendantsHaveChanged = descendants.some(function (newDescendant, position) {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  });\n\n  // Prevent any flashing\n  useEnhancedEffect(function () {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index: index\n      }));\n      return function () {\n        unregisterDescendant(descendant.element);\n      };\n    }\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId: parentId,\n    index: index\n  };\n}\nexport function DescendantProvider(props) {\n  var children = props.children,\n    id = props.id;\n  var _React$useState3 = React.useState([]),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    items = _React$useState4[0],\n    set = _React$useState4[1];\n  var registerDescendant = React.useCallback(function (_ref) {\n    var element = _ref.element,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n    set(function (oldItems) {\n      var newItems;\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element: element,\n          index: 0\n        })];\n      }\n      var index = binaryFindElement(oldItems, element);\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n\n        var newItem = _extends({}, other, {\n          element: element,\n          index: index\n        });\n\n        // If an index is not found we will push the element to the end.\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n      newItems.forEach(function (item, position) {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  var unregisterDescendant = React.useCallback(function (element) {\n    set(function (oldItems) {\n      return oldItems.filter(function (item) {\n        return element !== item.element;\n      });\n    });\n  }, []);\n  var value = React.useMemo(function () {\n    return {\n      descendants: items,\n      registerDescendant: registerDescendant,\n      unregisterDescendant: unregisterDescendant,\n      parentId: id\n    };\n  }, [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","unstable_useEnhancedEffect","useEnhancedEffect","jsx","_jsx","findIndex","array","comp","i","length","binaryFindElement","element","start","end","middle","Math","floor","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","DescendantContext","createContext","process","env","NODE_ENV","displayName","usePrevious","value","ref","useRef","useEffect","current","noop","useDescendant","descendant","_React$useState","useState","_React$useState2","_slicedToArray","forceUpdate","_React$useContext","useContext","_React$useContext$reg","registerDescendant","_React$useContext$unr","unregisterDescendant","_React$useContext$des","descendants","_React$useContext$par","parentId","index","item","previousDescendants","someDescendantsHaveChanged","some","newDescendant","position","undefined","DescendantProvider","props","children","id","_React$useState3","_React$useState4","items","set","useCallback","_ref","other","oldItems","newItems","newItem","slice","splice","forEach","filter","useMemo","Provider","propTypes","node","string"],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-rainbow-todo/node_modules/@mui/lab/TreeView/descendants.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\n\n// To replace with .findIndex() once we stop IE11 support.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n    if (array[middle].element === element) {\n      return middle;\n    }\n\n    // eslint-disable-next-line no-bitwise\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return start;\n}\nconst DescendantContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nconst noop = () => {};\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext);\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  const index = findIndex(descendants, item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  });\n\n  // Prevent any flashing\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n        element\n      } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n    set(oldItems => {\n      let newItems;\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n      const index = binaryFindElement(oldItems, element);\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n\n        const newItem = _extends({}, other, {\n          element,\n          index\n        });\n\n        // If an index is not found we will push the element to the end.\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { combineReducers } from '@reduxjs/toolkit';\nimport drawCardSlice from './drawCardsSlice';\nimport newDeckSlice from './newDeckSlice';\nexport const initialState = {\n  currentDeck: {},\n  currentDraw: {},\n  info: {}\n};\n\n// export const RootReducer = createSlice({\n//    name: 'todo_app',\n//    initialState,\n//    reducers: {},\n//    extraReducers(builder) {\n//       // new deck cases\n//       builder.addCase(createNewDeck.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Unable to create deck. Server or internet down',\n//          };\n//       });\n//       builder.addCase(createNewDeck.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Generating deck. Please wait...',\n//          };\n//       });\n//       builder.addCase(createNewDeck.fulfilled, (state, action) => {\n//          state.currentDeck = action.payload;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Deck generated',\n//          };\n//       });\n//       // draw cards cases\n//       builder.addCase(drawCards.fulfilled, (state, action) => {\n//          state.currentDraw = action.payload;\n//          state.currentDeck.remaining = action.payload.remaining;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Cards drawn',\n//          };\n//       });\n//       builder.addCase(drawCards.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Drawing a pair of cards...',\n//          };\n//       });\n//       builder.addCase(drawCards.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Cards could not be drawn. Check your connection',\n//          };\n//          console.log('drawCards.rejected payload', action.payload);\n//       });\n//    },\n// });\n\nconst rootReducer = combineReducers({\n  drawCardSlice: drawCardSlice,\n  newDeckSlice: newDeckSlice\n});\nexport const getInfoObj = state => state.info;\n\n// export const {addToDo} = RootReducer.actions;\nexport default rootReducer;","map":{"version":3,"names":["combineReducers","drawCardSlice","newDeckSlice","initialState","currentDeck","currentDraw","info","rootReducer","getInfoObj","state"],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-bridge-card-game/src/redux-store/RootReducer.ts"],"sourcesContent":["import React from 'react';\nimport {\n   combineReducers,\n   createAsyncThunk,\n   createSlice,\n   current,\n} from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nimport {GlobalState, Todo} from '../helpers/types';\nimport {createNewDeck} from '../helpers/CRUD/create';\nimport {drawCards} from '../helpers/CRUD/read';\nimport drawCardSlice from './drawCardsSlice';\nimport newDeckSlice from './newDeckSlice';\n\nexport const initialState: GlobalState = {\n   currentDeck: {},\n   currentDraw: {},\n   info: {},\n};\n\n// export const RootReducer = createSlice({\n//    name: 'todo_app',\n//    initialState,\n//    reducers: {},\n//    extraReducers(builder) {\n//       // new deck cases\n//       builder.addCase(createNewDeck.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Unable to create deck. Server or internet down',\n//          };\n//       });\n//       builder.addCase(createNewDeck.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Generating deck. Please wait...',\n//          };\n//       });\n//       builder.addCase(createNewDeck.fulfilled, (state, action) => {\n//          state.currentDeck = action.payload;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Deck generated',\n//          };\n//       });\n//       // draw cards cases\n//       builder.addCase(drawCards.fulfilled, (state, action) => {\n//          state.currentDraw = action.payload;\n//          state.currentDeck.remaining = action.payload.remaining;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Cards drawn',\n//          };\n//       });\n//       builder.addCase(drawCards.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Drawing a pair of cards...',\n//          };\n//       });\n//       builder.addCase(drawCards.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Cards could not be drawn. Check your connection',\n//          };\n//          console.log('drawCards.rejected payload', action.payload);\n//       });\n//    },\n// });\n\nconst rootReducer = combineReducers({\n   drawCardSlice: drawCardSlice,\n   newDeckSlice: newDeckSlice,\n});\n\nexport const getInfoObj = (state: any) => state.info;\n\n// export const {addToDo} = RootReducer.actions;\nexport default rootReducer;\n"],"mappings":"AACA,SACGA,eAAe,QAIX,kBAAkB;AAMzB,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,OAAO,MAAMC,YAAyB,GAAG;EACtCC,WAAW,EAAE,CAAC,CAAC;EACfC,WAAW,EAAE,CAAC,CAAC;EACfC,IAAI,EAAE,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAGP,eAAe,CAAC;EACjCC,aAAa,EAAEA,aAAa;EAC5BC,YAAY,EAAEA;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMM,UAAU,GAAIC,KAAU,IAAKA,KAAK,CAACH,IAAI;;AAEpD;AACA,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport drawCardsSlice from './drawCardsSlice';\nexport const store = configureStore({\n  reducer: {\n    drawCards: drawCardsSlice\n  }\n});\nexport const initialState = {\n  currentDeck: {},\n  currentDraw: {},\n  info: {}\n};\nexport const getInfoObj = state => state.info;\n\n// Infer the `RootState` and `AppDispatßch` types from the store itself\n\nexport const useAppDispatch = useDispatch; // Export a hook that","map":{"version":3,"names":["configureStore","useDispatch","drawCardsSlice","store","reducer","drawCards","initialState","currentDeck","currentDraw","info","getInfoObj","state","useAppDispatch"],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-bridge-card-game/src/redux-store/store.ts"],"sourcesContent":["import {configureStore} from '@reduxjs/toolkit';\nimport {useDispatch} from 'react-redux';\nimport {GlobalState} from '../helpers/types';\nimport {newDeckSlice} from './newDeckSlice';\nimport drawCardsSlice from './drawCardsSlice';\n\nexport const store = configureStore({\n   reducer: {\n      drawCards: drawCardsSlice,\n   },\n});\n\nexport const initialState: GlobalState = {\n   currentDeck: {},\n   currentDraw: {},\n   info: {},\n};\n\nexport const getInfoObj = (state: any) => state.info;\n\n// Infer the `RootState` and `AppDispatßch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch: () => AppDispatch = useDispatch; // Export a hook that\n"],"mappings":"AAAA,SAAQA,cAAc,QAAO,kBAAkB;AAC/C,SAAQC,WAAW,QAAO,aAAa;AAGvC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,OAAO,MAAMC,KAAK,GAAGH,cAAc,CAAC;EACjCI,OAAO,EAAE;IACNC,SAAS,EAAEH;EACd;AACH,CAAC,CAAC;AAEF,OAAO,MAAMI,YAAyB,GAAG;EACtCC,WAAW,EAAE,CAAC,CAAC;EACfC,WAAW,EAAE,CAAC,CAAC;EACfC,IAAI,EAAE,CAAC;AACV,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,KAAU,IAAKA,KAAK,CAACF,IAAI;;AAEpD;;AAIA,OAAO,MAAMG,cAAiC,GAAGX,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
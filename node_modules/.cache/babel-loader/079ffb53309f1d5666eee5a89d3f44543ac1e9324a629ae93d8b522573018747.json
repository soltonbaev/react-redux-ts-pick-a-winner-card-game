{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.colorChannel = void 0;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.private_safeAlpha = private_safeAlpha;\nexports.private_safeColorChannel = void 0;\nexports.private_safeDarken = private_safeDarken;\nexports.private_safeEmphasize = private_safeEmphasize;\nexports.private_safeLighten = private_safeLighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\nvar _utils = require(\"@mui/utils\");\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nconst colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexports.colorChannel = colorChannel;\nconst private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexports.private_safeColorChannel = private_safeColorChannel;\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nfunction private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nfunction private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","alpha","colorChannel","darken","decomposeColor","emphasize","getContrastRatio","getLuminance","hexToRgb","hslToRgb","lighten","private_safeAlpha","private_safeColorChannel","private_safeDarken","private_safeEmphasize","private_safeLighten","recomposeColor","rgbToHex","_utils","require","clamp","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","Math","color","slice","re","RegExp","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","type","charAt","marker","indexOf","substring","Error","formatMuiErrorMessage","values","colorSpace","split","shift","parseFloat","decomposedColor","val","idx","warning","warn","i","h","s","l","a","f","k","rgb","push","Number","toFixed","foreground","background","lumA","lumB","coefficient"],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-rainbow-todo/node_modules/@mui/system/colorManipulator.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.colorChannel = void 0;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.private_safeAlpha = private_safeAlpha;\nexports.private_safeColorChannel = void 0;\nexports.private_safeDarken = private_safeDarken;\nexports.private_safeEmphasize = private_safeEmphasize;\nexports.private_safeLighten = private_safeLighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\nvar _utils = require(\"@mui/utils\");\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nconst colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexports.colorChannel = colorChannel;\nconst private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexports.private_safeColorChannel = private_safeColorChannel;\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nfunction private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nfunction private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
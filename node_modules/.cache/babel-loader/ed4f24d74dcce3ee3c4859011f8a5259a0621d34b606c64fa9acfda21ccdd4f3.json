{"ast":null,"code":"// import React from 'react';\n// import {createAsyncThunk, createSlice, current} from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// import {GlobalState, Todo} from '../helpers/types';\n// import {createNewDeck} from '../helpers/CRUD/create';\n// import {drawCards} from '../helpers/CRUD/read';\n\n// export const RootReducer = createSlice({\n//    name: 'todo_app',\n//    initialState,\n//    reducers: {},\n//    extraReducers(builder) {\n//       // new deck cases\n//       builder.addCase(createNewDeck.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Unable to create deck. Server or internet down',\n//          };\n//       });\n//       builder.addCase(createNewDeck.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Generating deck. Please wait...',\n//          };\n//       });\n//       builder.addCase(createNewDeck.fulfilled, (state, action) => {\n//          state.currentDeck = action.payload;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Deck generated',\n//          };\n//       });\n//       // draw cards cases\n//       builder.addCase(drawCards.fulfilled, (state, action) => {\n//          state.currentDraw = action.payload;\n//          state.currentDeck.remaining = action.payload.remaining;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Cards drawn',\n//          };\n//       });\n//       builder.addCase(drawCards.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Drawing a pair of cards...',\n//          };\n//       });\n//       builder.addCase(drawCards.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Cards could not be drawn. Check your connection',\n//          };\n//          console.log('drawCards.rejected payload', action.payload);\n//       });\n//    },\n// });\n\n// // export const {addToDo} = RootReducer.actions;\n// export default RootReducer.reducer;","map":{"version":3,"names":[],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-bridge-card-game/src/redux-store/RootReducer.ts"],"sourcesContent":["// import React from 'react';\n// import {createAsyncThunk, createSlice, current} from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// import {GlobalState, Todo} from '../helpers/types';\n// import {createNewDeck} from '../helpers/CRUD/create';\n// import {drawCards} from '../helpers/CRUD/read';\n\n// export const RootReducer = createSlice({\n//    name: 'todo_app',\n//    initialState,\n//    reducers: {},\n//    extraReducers(builder) {\n//       // new deck cases\n//       builder.addCase(createNewDeck.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Unable to create deck. Server or internet down',\n//          };\n//       });\n//       builder.addCase(createNewDeck.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Generating deck. Please wait...',\n//          };\n//       });\n//       builder.addCase(createNewDeck.fulfilled, (state, action) => {\n//          state.currentDeck = action.payload;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Deck generated',\n//          };\n//       });\n//       // draw cards cases\n//       builder.addCase(drawCards.fulfilled, (state, action) => {\n//          state.currentDraw = action.payload;\n//          state.currentDeck.remaining = action.payload.remaining;\n//          state.info = {\n//             switchModalOn: false,\n//             type: 'success',\n//             message: 'Cards drawn',\n//          };\n//       });\n//       builder.addCase(drawCards.pending, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'warning',\n//             message: 'Drawing a pair of cards...',\n//          };\n//       });\n//       builder.addCase(drawCards.rejected, (state, action) => {\n//          state.info = {\n//             switchModalOn: true,\n//             type: 'error',\n//             message: 'Cards could not be drawn. Check your connection',\n//          };\n//          console.log('drawCards.rejected payload', action.payload);\n//       });\n//    },\n// });\n\n// // export const {addToDo} = RootReducer.actions;\n// export default RootReducer.reducer;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
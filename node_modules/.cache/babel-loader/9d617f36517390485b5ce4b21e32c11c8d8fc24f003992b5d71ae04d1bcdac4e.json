{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './RootReducer';\nimport { useDispatch } from 'react-redux';\nexport const store = configureStore({\n  reducer: rootReducer\n});\n\n// Infer the `RootState` and `AppDispatßch` types from the store itself\n\nexport const useAppDispatch = useDispatch; // Export a hook that","map":{"version":3,"names":["configureStore","rootReducer","useDispatch","store","reducer","useAppDispatch"],"sources":["/Users/ibraim/Desktop/====RESOURCES/-=PERMANENT=-/-=CRAFT/-=TECH/-=CODE/-=MY-CODE/-PROJECTS-/SOLO/react-ts-redux-bridge-card-game/src/redux-store/store.ts"],"sourcesContent":["import {configureStore} from '@reduxjs/toolkit';\nimport rootReducer from './RootReducer';\nimport {useDispatch} from 'react-redux';\nexport const store = configureStore({\n   reducer: rootReducer,\n});\n\n// Infer the `RootState` and `AppDispatßch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch: () => AppDispatch = useDispatch; // Export a hook that\n"],"mappings":"AAAA,SAAQA,cAAc,QAAO,kBAAkB;AAC/C,OAAOC,WAAW,MAAM,eAAe;AACvC,SAAQC,WAAW,QAAO,aAAa;AACvC,OAAO,MAAMC,KAAK,GAAGH,cAAc,CAAC;EACjCI,OAAO,EAAEH;AACZ,CAAC,CAAC;;AAEF;;AAIA,OAAO,MAAMI,cAAiC,GAAGH,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}